

-----------------------------------------------------------------------------------------------------------------------

QUIERO ANIMARTE A QUE DESCUBRAS QUE PASA SI NO TE RINDES

-----------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------

AVANCES:

1. Tengo para avanzar, crear el flujo para endpoint de registro y creación de usuarios con distintos roles y almacenamiento de tokens, con secrets por usuario si es posible, además de manejo de UserDetails, programación con flujo de stream y manejo de roles. Luego, flujo de validación de token y refresco del mismo. Luego, desarrollar endpoints distintos, para probar el acceso de recursos por roles de los usuarios. luego de ello, estamos listos para avanzar en proyecto de logística...

1.1 Tienes el contexto de usuarios, roles, productos, y acciones. Usuarios admin, pueden ver, crear, eliminar productos (acciones). Usuarios mantenedores, pueden ver y modificar productos (acciones). Usuarios clientes, pueden buscar productos, filtrar productos por características y simular compra (acciones).

(ROLES EN ESTE CONTEXTO ^ ROLE_ADMIN, ROLE_MAINTAINER, ROLE_CUSTOMER)

2. luego de que termines de desarrollar, puedes consultar como tips de como buscar la documentación de manera correcta, ya que, con toda la explicación que me entrega me queda mucho más claro en el desarrollo de API con SpringBoot con Spring security, pero muchas veces uno busca en la documentación original y implementa soluciones que no te van a servir, o te pierdes dentro de tanta información y no finalizas de implementar ningún enfoque...

3. En el proyecto de logística, luego de implementar ciertas cosas, se puede seguir con validación de datos, documentación, notificaciones (email, whatsapp, telegram), pruebas unitarias....

























-----------------------------------------------------------------------------------------------------------------------

----- ENTENDIMIENTO DE SPRING SECURITY

// .addFilterBefore(new JwtAuthFilter(), UsernamePasswordAuthenticationFilter.class) En caso de agregar filtro de autenticación de usuario predeterminado
    // UsernamePasswordAuthenticationFilter:
    // Solo actúa en /login (POST) si usas formLogin(). En tu API JWT, no lo necesitas.
    // http.formLogin(form -> form
    //     .loginProcessingUrl("/login") // Ruta POST para enviar usuario/contraseña
    //     .usernameParameter("email")   // Campo del request (default: "username")
    //     .passwordParameter("clave")   // Campo del request (default: "password")
    // );

    // Roles vs Authorities:
    // Roles: Prefijo ROLE_ (implícito en hasRole()).
    // Authorities: Nombres directos (ej.: READ).

    // Al parecer solo es necesario, para crear un objeto de autenticación y necesite ser gestionado por el Authenticator Manager y la implementación del UserDetails con UsernamePasswordAuthenticationFilter
    // // Objeto de spring que nos ayuda a gestionar la autenticación del sistema
    // @Autowired
    // private AuthenticationConfiguration authenticationConfiguration;
    // // Obtener la implementación del objeto que gestiona la autenticación
    // @Bean
    // public AuthenticationManager authenticationManager() throws Exception {
    //     return authenticationConfiguration.getAuthenticationManager();
    // }

    // // Implementamos el objeto relacionado con el filtro del CORS, es solamente necesario para cuando se necesita ajustar el orden de presedencia
    // @Bean
    // public FilterRegistrationBean<CorsFilter> corsFilter() {
    //     FilterRegistrationBean<CorsFilter> corsFilter = new FilterRegistrationBean<> (new CorsFilter(this.corsConfiguration()));
    //     corsFilter.setOrder(Ordered.HIGHEST_PRECEDENCE);
    //     return corsFilter;
    // }

    // // Es posible agregar un filtro a ciertas rutas, que simularía el comportamiendo de middlewares
    // @Bean  
    // public FilterRegistrationBean<MiFiltro> filtro() {  
    //     FilterRegistrationBean<MiFiltro> bean = new FilterRegistrationBean<>();  
    //     bean.setFilter(new MiFiltro());  
    //     bean.addUrlPatterns("/api/*"); // Solo aplica a rutas /api/...  
    //     return bean;  
    // }  

    // UN ORDEN QUE ES RECOMENDADO
    // @Bean
    // public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
    //     return http
    //         .cors(withDefaults()) // 1. CORS (primero, para preflight requests)
    //         .csrf(csrf -> csrf.disable()) // 2. CSRF (deshabilitado para APIs)
    //         .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS)) // 3. Sin sesión
    //         .addFilterBefore(new JwtAuthFilter(), UsernamePasswordAuthenticationFilter.class) // 4. Filtro JWT
    //         .authorizeHttpRequests(auth -> auth // 5. Autorizaciones
    //             .requestMatchers("/auth/**").permitAll()
    //             .anyRequest().authenticated()
    //         )
    //         .build();
    // }

    // IMPORTANTE
    //     ¿Por qué usar addFilterBefore() incluso si no usas UsernamePasswordAuthenticationFilter?
    // ✅ Razón clave:
    // Spring Security siempre incluye filtros internos (como AnonymousAuthenticationFilter o FilterSecurityInterceptor). Si añades tu JwtAuthFilter con addFilter(), se colocará al final de la cadena, lo que podría causar problemas si otros filtros esperan una autenticación previa.
    // Filtros: Usa addFilterBefore() y recuerda que el último registrado se ejecuta primero.
    // AOP:
    // Ventaja: Evita código repetitivo (ej.: logs/seguridad en cada método).
    // Spring lo usa internamente para @Transactional, @Cacheable, etc.




























-----------------------------------------------------------------------------------------------------------------------










