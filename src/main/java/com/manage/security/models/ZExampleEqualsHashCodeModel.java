package com.manage.security.models;

import java.util.Objects;

public class ZExampleEqualsHashCodeModel {

    private Long id;
    private String username;
    
    public Long getId() {
        return id;
    }
    public void setId(Long id) {
        this.id = id;
    }
    public String getUsername() {
        return username;
    }
    public void setUsername(String username) {
        this.username = username;
    }

    // Equals y hash personalizados (Versi√≥n moderna) - en HashSet<>, evita duplicados, al verificar primero
    // por el hash y si existe colisi√≥n (el resultado es el mismo), compara con el equals, para terminar de
    // comparar si es el mismo objeto
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        ZExampleEqualsHashCodeModel user = (ZExampleEqualsHashCodeModel) o;
        return Objects.equals(id, user.id) && 
            Objects.equals(username, user.username);
    }
    @Override
    public int hashCode() {
        return Objects.hash(this.id, this.username);
    }

    // // M√âTODOS SOBREESCRITO POR IDE (TRADICIONALES)
    // @Override
    // public boolean equals(Object obj) {
    //     if (this == obj)
    //         return true;
    //     if (obj == null)
    //         return false;
    //     if (getClass() != obj.getClass())
    //         return false;
    //     User other = (User) obj;
    //     if (id == null) {
    //         if (other.id != null)
    //             return false;
    //     } else if (!id.equals(other.id))
    //         return false;
    //     if (username == null) {
    //         if (other.username != null)
    //             return false;
    //     } else if (!username.equals(other.username))
    //         return false;
    //     return true;
    // }
    // // Utiliza 31 para algor√≠tmo de n√∫mero impar y primo, evita colisiones de hash
    // @Override
    // public int hashCode() {
    //     final int prime = 31;
    //     int result = 1;
    //     result = prime * result + ((id == null) ? 0 : id.hashCode());
    //     result = prime * result + ((username == null) ? 0 : username.hashCode());
    //     return result;
    // }

    //     1. Orden de Comparaci√≥n en equals()
    // ‚úÖ Por qu√© primero se verifica la instancia (this == obj) antes de null:
    // Raz√≥n 1: Un objeto nunca es igual a null, pero s√≠ es igual a s√≠ mismo. Esta comparaci√≥n es r√°pida y evita accesos innecesarios a memoria.
    // Raz√≥n 2: Si obj es null, la condici√≥n this == obj ser√° false y luego se rechazar√° en el siguiente if (obj == null).
    // üîπ Ejemplo:
    // java
    // @Override
    // public boolean equals(Object obj) {
    //     if (this == obj) return true;  // Optimizaci√≥n: verifica si es la misma instancia
    //     if (obj == null) return false; // Luego verifica null
    //     // ... resto de la l√≥gica
    // }

    // 2. Instancia vs Hash vs Valor
    // Concepto	Descripci√≥n	Ejemplo
    // Instancia	Referencia √∫nica en memoria asignada por Java (direcci√≥n hexadecimal como User@5b2133b1). No cambia durante la vida del objeto.	user1 == user2 (compara direcciones).
    // Hash	N√∫mero calculado (con hashCode()) basado en los campos del objeto. Puede repetirse (colisi√≥n).	user1.hashCode() ‚Üí 42.
    // Valor	Contenido de los campos del objeto (comparado en equals()).	user1.getName().equals(user2.getName()).
    // ‚úÖ Clave:
    // Instancia: Identidad f√≠sica en memoria.
    // Hash: Representaci√≥n num√©rica del estado (para estructuras como HashMap).
    // Valor: Contenido l√≥gico del objeto.

    // 4. Caso Pr√°ctico: Hash Colisionado
    // Si dos objetos tienen todos sus campos null, su hash ser√° 961 (como vimos antes), pero equals() los diferenciar√° si es necesario:
    // java
    // User userA = new User(null, null);
    // User userB = new User(null, null);
    // System.out.println(userA.hashCode()); // 961
    // System.out.println(userB.hashCode()); // 961
    // System.out.println(userA.equals(userB)); // true (todos los campos coinciden)

    // RECOMENDADO IMPLEMENTARLO EN CLASES DE MODELOS QUE IMPLEMENTAN L√ìGICA DE APLICACI√ìN (CON EL ID)
    // 1. ¬øDeben implementarse equals() y hashCode() en entidades/modelos?
    // ‚úÖ S√≠, es altamente recomendado, especialmente si:
    // Usas colecciones como HashSet, HashMap o operaciones de b√∫squeda/eliminaci√≥n.
    // Necesitas comparar l√≥gicamente objetos (ej.: verificar si dos User son el mismo).
    // ‚ö†Ô∏è Si no los implementas:
    // Java usar√° la implementaci√≥n por defecto de Object:
    // equals(): Compara instancias (direcciones de memoria), no contenido.
    // hashCode(): Devuelve un n√∫mero basado en la direcci√≥n de memoria (no en campos).
    // üîπ Ejemplo de problema sin implementaci√≥n:
    // java
    // User user1 = new User(1L, "john");  // Mismo ID y username
    // User user2 = new User(1L, "john");
    // System.out.println(user1.equals(user2));  // false (¬°Error! Deber√≠a ser true)
    // Set<User> users = new HashSet<>();
    // users.add(user1);
    // users.add(user2);  // Se agregar√° como duplicado (hashCode diferente)

}
